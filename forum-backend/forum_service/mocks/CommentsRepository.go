// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Engls/forum-project2/forum_service/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// CommentsRepository is an autogenerated mock type for the CommentsRepository type
type CommentsRepository struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *CommentsRepository) CreateComment(ctx context.Context, comment entity.Comment) (entity.Comment, error) {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) (entity.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) entity.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPostID provides a mock function with given fields: ctx, postID
func (_m *CommentsRepository) GetCommentsByPostID(ctx context.Context, postID int) ([]entity.Comment, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPostID")
	}

	var r0 []entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.Comment, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Comment); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentsRepository creates a new instance of CommentsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentsRepository {
	mock := &CommentsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
