// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/miqxzz/miqxzzforum/auth_service/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *AuthRepository) GetUserByUsername(username string) (entity.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsernameByID provides a mock function with given fields: ctx, userID
func (_m *AuthRepository) GetUsernameByID(ctx context.Context, userID int) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsernameByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *AuthRepository) Register(user entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveToken provides a mock function with given fields: userID, token
func (_m *AuthRepository) SaveToken(userID int, token string) error {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRole provides a mock function with given fields: userID, newRole
func (_m *AuthRepository) UpdateUserRole(userID int, newRole string) error {
	ret := _m.Called(userID, newRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, newRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
