// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/Engls/forum-project2/auth_service/internal/entity"
	mock "github.com/stretchr/testify/mock"
	context "context"
)


type AuthRepository struct {
	mock.Mock
}

func (_m *AuthRepository) GetUserByUsername(username string) (entity.User, error) {
	ret := _m.Called(username)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *AuthRepository) Register(user entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *AuthRepository) SaveToken(userID int, token string) error {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *AuthRepository) GetUsernameByID(ctx context.Context, id int) (string, error) {
	args := _m.Called(ctx, id)
	return args.String(0), args.Error(1)
}

func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
